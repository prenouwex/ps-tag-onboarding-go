// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/wexinc/ps-tag-onboarding-go/internal/model"

	utils "github.com/wexinc/ps-tag-onboarding-go/internal/utils"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// DbCreateUser provides a mock function with given fields: user
func (_m *IUserRepository) DbCreateUser(user *model.User) (*model.User, utils.MessageErr) {
	ret := _m.Called(user)

	var r0 *model.User
	var r1 utils.MessageErr
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, utils.MessageErr)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) utils.MessageErr); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.MessageErr)
		}
	}

	return r0, r1
}

// DbDeleteUser provides a mock function with given fields: id
func (_m *IUserRepository) DbDeleteUser(id int64) utils.MessageErr {
	ret := _m.Called(id)

	var r0 utils.MessageErr
	if rf, ok := ret.Get(0).(func(int64) utils.MessageErr); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.MessageErr)
		}
	}

	return r0
}

// DbGetUser provides a mock function with given fields: id
func (_m *IUserRepository) DbGetUser(id int64) (*model.User, utils.MessageErr) {
	ret := _m.Called(id)

	var r0 *model.User
	var r1 utils.MessageErr
	if rf, ok := ret.Get(0).(func(int64) (*model.User, utils.MessageErr)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) utils.MessageErr); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.MessageErr)
		}
	}

	return r0, r1
}

// DbListUsers provides a mock function with given fields:
func (_m *IUserRepository) DbListUsers() ([]model.User, utils.MessageErr) {
	ret := _m.Called()

	var r0 []model.User
	var r1 utils.MessageErr
	if rf, ok := ret.Get(0).(func() ([]model.User, utils.MessageErr)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func() utils.MessageErr); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.MessageErr)
		}
	}

	return r0, r1
}

// DbUpdateUser provides a mock function with given fields: user
func (_m *IUserRepository) DbUpdateUser(user *model.User) (*model.User, utils.MessageErr) {
	ret := _m.Called(user)

	var r0 *model.User
	var r1 utils.MessageErr
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, utils.MessageErr)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) utils.MessageErr); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.MessageErr)
		}
	}

	return r0, r1
}

// ExistsByFirstNameAndLastName provides a mock function with given fields: firstName, lastName
func (_m *IUserRepository) ExistsByFirstNameAndLastName(firstName string, lastName string) (bool, utils.MessageErr) {
	ret := _m.Called(firstName, lastName)

	var r0 bool
	var r1 utils.MessageErr
	if rf, ok := ret.Get(0).(func(string, string) (bool, utils.MessageErr)); ok {
		return rf(firstName, lastName)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(firstName, lastName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) utils.MessageErr); ok {
		r1 = rf(firstName, lastName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.MessageErr)
		}
	}

	return r0, r1
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
